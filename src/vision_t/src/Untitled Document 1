/*
* File:   main.cpp
* Author: sagar
*
* Created on 10 September, 2012, 7:48 PM
*/
 #include <ros/ros.h>
 #include <visualization_msgs/Marker.h>
 
 #include <cmath>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
 
using namespace cv;
using namespace std;
 
double alpha; /**< Simple contrast control */
int beta; /**< Simple brightness control */
int w = 300;

int edgeThresh = 1;
int lowThreshold;
int const max_lowThreshold = 100;
int ratio = 3;
int kernel_size = 3;

int main(int argc, char** argv) {

    ros::init(argc, argv, "circle");
    ros::NodeHandle n;
    ros::Publisher marker_pub = n.advertise<visualization_msgs::Marker>("segment_marker", 10);
    ros::Rate r(30);
  
    float f = 0.0;

//////////////////////////////////

VideoCapture stream1(1);
VideoCapture stream0(0);

namedWindow("My Window", 1);
namedWindow("My Windowa", 1);

vector<Mat> spl,spl2;
 
Mat B,B2, kern;

//stream1 >> B;
stream1.read(B);
stream1.read(B2);			
 
kern = (Mat_<char>(3,3) << 0,-1,0,-1,10,-1,0,-1,0);

//Create trackbar to change brightness
int iSliderValue1 = 50;
createTrackbar("Brightness", "My Window", &iSliderValue1, 100);
 
//Create trackbar to change contrast
int iSliderValue2 = 50;
createTrackbar("Contrast", "My Window", &iSliderValue2, 100);
 
//Create trackbar to change contrast
int iSliderValue3 = 1;
createTrackbar("upper", "My Window", &iSliderValue3, 255);
 
 
//Create trackbar to change contrast
int iSliderValue4 = 1;
createTrackbar("lower", "My Window", &iSliderValue4, 255);
 


//Create trackbar to change brightness
int iSliderValue1a = 100;
createTrackbar("Brightness", "My Windowa", &iSliderValue1a, 100);
 
//Create trackbar to change contrast
int iSliderValue2a = 100;
createTrackbar("Contrast", "My Windowa", &iSliderValue2a, 100);
 
//Create trackbar to change contrast
int iSliderValue3a = 215;
createTrackbar("upper", "My Windowa", &iSliderValue3a, 255);
 
 
//Create trackbar to change contrast
int iSliderValue4a = 1;
createTrackbar("lower", "My Windowa", &iSliderValue4a, 255);
 


	visualization_msgs::Marker points, line_strip, line_list;
	points.header.frame_id = line_strip.header.frame_id = line_list.header.frame_id = "/catheter_shape";
	points.header.stamp = line_strip.header.stamp = line_list.header.stamp = ros::Time::now();
	points.ns = line_strip.ns = line_list.ns = "circle";
	points.action = line_strip.action = line_list.action = visualization_msgs::Marker::ADD;
	points.pose.orientation.w = line_strip.pose.orientation.w = line_list.pose.orientation.w = 1.0;

	points.id = 0;
	line_strip.id = 1;
	line_list.id = 2;

	points.type = visualization_msgs::Marker::POINTS;
	line_strip.type = visualization_msgs::Marker::LINE_STRIP;
	line_list.type = visualization_msgs::Marker::LINE_LIST;


	points.scale.x = 0.2;
	points.scale.y = 0.2;
	// LINE_STRIP/LINE_LIST markers use only the x component of scale, for the line width
	line_strip.scale.x = 0.1;
	line_list.scale.x = 0.1;



	// Points are green
	points.color.g = 1.0f;
	points.color.a = 1.0;

	// Line strip is blue
	line_strip.color.b = 1.0;
	line_strip.color.a = 1.0;

	// Line list is red
	line_list.color.r = 1.0;
	line_list.color.a = 1.0;

 
while (ros::ok()) {
 

Mat A, A2, B, B2, H, H2, Ha, H2a, dst, dst2;

stream1.read(B);
stream0.read(B2);
 
int iBrightness  = iSliderValue1 - 50;
int upper  = iSliderValue3;
int lower  = iSliderValue4;
double dContrast = iSliderValue2 / 50.0;

int iBrightnessa  = iSliderValue1a - 50;
int uppera  = iSliderValue3a;
int lowera  = iSliderValue4a;
double dContrasta = iSliderValue2a / 50.0;
 
B.convertTo(A, -1, dContrast, iBrightness); 
B2.convertTo(A2, -1, dContrasta, iBrightnessa); 
 
split(A,spl);
split(A2,spl2);
 
Mat C = spl[0];
Mat C2 = spl[2];

Mat Ca = spl2[0];
Mat C2a = spl2[2];


Mat th1, th2;
Mat th1a, th2a;

threshold(C, th1, lower,upper,CV_THRESH_BINARY);
threshold(C2, th2, lower,upper,CV_THRESH_BINARY);

threshold(Ca, th1a, lowera,uppera,CV_THRESH_BINARY);
threshold(C2a, th2a, lowera,uppera,CV_THRESH_BINARY);

GaussianBlur(th1, th1, Size(9,9), 2, 2);
GaussianBlur(th2, th2, Size(9,9), 2, 2);

GaussianBlur(th1a, th1a, Size(9,9), 2, 2);
GaussianBlur(th2a, th2a, Size(9,9), 2, 2);

/// Canny detector


Canny( th1, H, lowThreshold, lowThreshold*ratio, kernel_size );
Canny( th2, H2, lowThreshold, lowThreshold*ratio, kernel_size );

/////////////////////////////
Canny( th1a, Ha, lowThreshold, lowThreshold*ratio, kernel_size );
Canny( th2a, H2a, lowThreshold, lowThreshold*ratio, kernel_size );

///////////////////////////////


/////////////////////////////// SHAFT ////////////////////////////////
vector<Vec3f> circles2;   /// shaft
HoughCircles( H2, circles2, CV_HOUGH_GRADIENT, 1, 20, 20, 1, .1, 10 );
 
/////////////////////////////// SHAFT ////////////////////////////////
vector<Vec3f> circles2a;   /// shaft
HoughCircles( H2a, circles2a, CV_HOUGH_GRADIENT, 1, 20, 20, 1, .1, 10 );
 


float distance[circles2.size()];
int shaft_point;
float distance_pre = 0, end_shaft[2];

float distancea[circles2a.size()];
int shaft_pointa;
float distance_prea = 0, end_shafta[2];


///////////////SHAFT SIDE

for(size_t i = 0; i< circles2a.size(); i++)
{
 

distancea[i] = sqrt( abs(cvRound(circles2a[i][0])-613)^2+abs(cvRound(circles2a[i][1])-305)^2);

cout<<" distance: " << distancea[i]	<<endl;

if (distancea[i] >= distance_prea){
shaft_pointa = i;

distance_prea = distancea[i];
}


}


if (circles2a.size()!=0){

Point center2a(cvRound(circles2a[shaft_pointa][0]), cvRound(circles2a[shaft_pointa][1]));
int radius2a = cvRound(circles2a[shaft_pointa][2]);
//cout<< "center :" << center2 << "\nradius:" << circles2.size() << endl;
circle(th2a, center2a, radius2a, Scalar(255,0,255), 5, 8, 0);

end_shafta[0] = cvRound(circles2a[shaft_pointa][0]);
end_shafta[1] = cvRound(circles2a[shaft_pointa][1]);

cout<<" shaft_point: " << distancea[shaft_pointa]	<<" shaft_point: " <<  end_shafta[0]  <<" shaft_point: " << end_shafta[1] <<endl;


}


///////////////////SHAFT UP //////////////////////////


for(size_t i = 0; i< circles2.size(); i++)
{
 

distance[i] = sqrt( abs(cvRound(circles2[i][0])-397)^2+abs(cvRound(circles2[i][1])-476)^2);

cout<<" distance: " << distance[i] <<endl;

if (distance[i] >= distance_pre){
shaft_point = i;

distance_pre = distance[i];
}

}




if (circles2.size()!=0){

Point center2(cvRound(circles2[shaft_point][0]), cvRound(circles2[shaft_point][1]));
int radius2 = cvRound(circles2[shaft_point][2]);
//cout<< "center :" << center2 << "\nradius:" << circles2.size() << endl;
circle(th2, center2, radius2, Scalar(255,0,255), 5, 8, 0);

end_shaft[0] = cvRound(circles2[shaft_point][0]);
end_shaft[1] = cvRound(circles2[shaft_point][1]);

cout<<" shaft_point: " << distance[shaft_point]	<<" shaft_point: " <<  end_shaft[0]  <<" shaft_point: " << end_shaft[1] <<endl;


}




////////////////////////////////////////////////////////////////////////////////////




/////////////////////////////////tip UP



vector<Vec3f> circles;    
HoughCircles( H, circles, CV_HOUGH_GRADIENT, 1, 20, 20, 1, .1, 5 );
 
//HoughCircles( H, circles, CV_HOUGH_GRADIENT, 1, H.rows/2, 20, 1, .1, 10 );
float segment_l[13][3]; 

int i2 = 0; 

for(size_t i = 0; i< circles.size(); i++)
{
	if ((cvRound(circles[i][1])<end_shaft[1])){
 
segment_l[i2][0] = cvRound(circles[i][0]);
segment_l[i2][1] = cvRound(circles[i][1]);
segment_l[i2][2] = sqrt( abs(cvRound(circles2[shaft_point][0])-cvRound(circles[i][0]))^2 + abs(cvRound(circles2[shaft_point][1])-cvRound(circles[i][1]))^2 );

i2++;

 }
 
}


//////////////////////////////////////SIDE
vector<Vec3f> circlesa;    
HoughCircles( Ha, circlesa, CV_HOUGH_GRADIENT, 1, 20, 20, 1, .1, 5 );
 
//HoughCircles( H, circles, CV_HOUGH_GRADIENT, 1, H.rows/2, 20, 1, .1, 10 );
float segment_la[13][3]; 

int i2a = 0; 

for(size_t i = 0; i< circlesa.size(); i++)
{
	if ((cvRound(circlesa[i][0])<end_shafta[0])){
 
segment_la[i2][0] = cvRound(circlesa[i][0]);
segment_la[i2][1] = cvRound(circlesa[i][1]);
segment_la[i2][2] = sqrt( abs(cvRound(circles2a[shaft_pointa][0])-cvRound(circlesa[i][0]))^2 + abs(cvRound(circles2a[shaft_pointa][1])-cvRound(circlesa[i][1]))^2 );

i2a++;

 }
 
}
 
///////////////////////////////Sorting UP //////

float temp[3];

for(int i =0; i<=i2+1; i++){

	for(int i3 =0; i3<i2+1; i3++){


	if(segment_l[i3][2] > segment_l[i3+1][2]){

	temp[0] = segment_l[i3][0];
	temp[1] = segment_l[i3][1];
	temp[2] = segment_l[i3][2]; 
		
segment_l[i3][0] = segment_l[i3+1][0];
segment_l[i3][1] = segment_l[i3+1][1];
segment_l[i3][2] = segment_l[i3+1][2];

segment_l[i3+1][0] = temp[0];
segment_l[i3+1][1] = temp[1];
segment_l[i3+1][2] = temp[2];

		}
		 }
		  }


for(int i = 0; i < i2; i++){
cout<<"segment : "<<segment_l[i][2]<<endl;
 

Point center(segment_l[i][0], segment_l[i][1]);
 
circle(A, center, 10, Scalar(255,255,0), 1, 8, 0);

}

cout<<"segment number : "<<i2<<endl;

/////////////////////////////////////////SIDE SORTING



float tempa[3];

for(int i =0; i<=i2a+1; i++){

	for(int i3 =0; i3<i2a+1; i3++){


	if(segment_la[i3][2] > segment_la[i3+1][2]){

	tempa[0] = segment_la[i3][0];
	tempa[1] = segment_la[i3][1];
	tempa[2] = segment_la[i3][2]; 
		
segment_la[i3][0] = segment_la[i3+1][0];
segment_la[i3][1] = segment_la[i3+1][1];
segment_la[i3][2] = segment_la[i3+1][2];

segment_la[i3+1][0] = tempa[0];
segment_la[i3+1][1] = tempa[1];
segment_la[i3+1][2] = tempa[2];

		}
		 }
		  }


for(int i = 0; i < i2a; i++){
cout<<"segment : "<<segment_la[i][2]<<endl;
 

Point centera(segment_la[i][0], segment_la[i][1]);
 
circle(A2, centera, 10, Scalar(255,255,0), 1, 8, 0);

}

cout<<"segment number : "<<i2a<<endl;



////////////Here need to decide position/////////////////////
// translation =  x-axis
// segment_la  ---<side : x and z
// segment_l     ----<top : y and z 
//
//
//
/////////////////////////////////////////////////////////////
for(int i = 0; i < i2; i++){

     geometry_msgs::Point p;

       p.x = segment_l[i][0];
       p.y = segment_l[i][1];
       p.z = 0;


        points.points.push_back(p);
        line_strip.points.push_back(p);
 
        // The line list needs two points for each line
        line_list.points.push_back(p);
        p.z += 1.0;
        line_list.points.push_back(p);


}

    marker_pub.publish(points);
    marker_pub.publish(line_strip);
    marker_pub.publish(line_list);
 

/////////////////////////////
imshow("A", A2);//th1);
imshow("th2", th2a);//th1);
imshow("th1", Ha);

   r.sleep();


 int iKey = waitKey(50);
 
//if user press 'ESC' key
if (iKey == 27)
{
break;
}
 
 
 
}
return 0;
}

 
