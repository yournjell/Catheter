#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
 #include <sys/stat.h>
#include <termios.h>
#include <fcntl.h>
#include <iostream>
#include <sstream>
#include <math.h>
 #include "ros/ros.h"
 #include "std_msgs/String.h"
#include <std_msgs/Float32.h>

#include <time.h>

using namespace std;

double tension1 ;
double tension2 ;
double tension3 ;
double tension4 ;

double speed[25] = {1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5};
char buf[5]= {1,1,1,1,1};
unsigned char buf2[25];


int main( int argc, char **argv)
{  

ros::init(argc, argv, "tension");
 ros::NodeHandle nn1;
std_msgs::Float32 msg;
 int fd;
   // 통신 포트를 파일 개념으로 사용하기 위한 디스크립터 입니다.
   // 이 파일 디스크립터를 이용하여 표준 입출력 함수를 이용
  // END Serial Available할 수 있습니다. 

ros::Publisher tension11_pub= nn1.advertise<std_msgs::Float32>("tension11", 1000);
ros::Publisher tension21_pub= nn1.advertise<std_msgs::Float32>("tension21", 1000);
ros::Publisher tension31_pub= nn1.advertise<std_msgs::Float32>("tension31", 1000);
ros::Publisher tension41_pub= nn1.advertise<std_msgs::Float32>("tension41", 1000);

   struct termios newtio;
  // END Serial Available
   // 보오율이나 stop bit 크기 등의 시리얼 통신 환경을 설정하기 위해
   // termios 구조체를 선언했습니다. 

  fd = open( "/dev/ttyACM0", O_RDWR | O_NOCTTY | O_NONBLOCK );

   // /dev/ttyS0를 사용하기 위해 open()함수를 사용합니다.
   // O_RDWR은 파일 디스크립터인 fd를 읽기와 쓰기 모드로 열기 위한 지정이며
   // O_NOCCTY와 O_NONBLOCK는 시리얼 통신 장치에 맞추어 추가했습니다.

   memset( &newtio, 0, sizeof(newtio) );

   // 시리얼 통신환경 설정을 위한 구조체 변수 newtio 값을 0 바이트로 깨끗이 채웁니다. 

  // END Serial Available
   newtio.c_cflag = B115200;   // 통신 속도 115200 
   newtio.c_cflag |= CS8;      // 데이터 비트가 8bit 
   newtio.c_cflag |= CLOCAL;   // 외부 모뎀을 사용하지 않고 내부 통신 포트 사용 
   newtio.c_cflag |= CREAD;    // 쓰기는 기본, 읽기도 가능하게 
   newtio.c_iflag = 1;         // parity 비트는 없음
   newtio.c_oflag = 0;
   newtio.c_lflag = 0;
   newtio.c_cc[VTIME] = 1; 
   newtio.c_cc[VMIN] = 0; 

   tcflush (fd, TCIFLUSH );
   tcsetattr(fd, TCSANOW, &newtio );   // 포트에 대한 통신 환경을 설정합니다. 


	//write(fd, buf, 255);

	//cout<<"dd"<<endl;
  // do your stuff
usleep(20000);

while(ros::ok()){
//int p =0;

//while(p < 100){

//write(fd, buf, 5);
// tcsetattr(fd, TCSANOW, &newtio ); 
 //  tcflush (fd, TCIFLUSH );
//p++;
//}
//usleep(2000);


	int tension[25], k = 24;

	unsigned char n = read(fd, buf2,25);
		

	for(int ii = 0; ii<25; ii++){

	int ll = (int)(buf2[ii]);
	tension[24-ii] = ll-48;
//printf("%d ",ll-48);
	}

 //  tcflush (fd, TCIFLUSH );

//printf("\n  ");




		int i1 = 0, deci = 2, state_bit;
		double tension_fr[10] = {0};

			for(int j = 0; j<25; j++){

			printf("%d ",buf2[j]);
				if(tension[j]==-2){ 
					i1 = i1+1; 
					deci = 2; }
				else {

		tension_fr[i1]= (tension[j]/pow10(deci)) + tension_fr[i1];
			deci = deci-1;

			}


			//printf("%d ", tension[j]);

			}


			for(int j = 0; j<10; j++){

			if(tension_fr[9-j] == 7.77){

			 tension1 = tension_fr[9-j-1];
			 tension2 = tension_fr[9-j-2];
			 tension3 = tension_fr[9-j-3];
			 tension4 = tension_fr[9-j-4];

			printf("tension 1: %f tension 2: %f tension 3: %f tension 4: %f ", tension1, tension2, tension3, tension4);
			break;
			}

			else if(j == 19){

			printf("tension 1: %f tension 2: %f tension 3: %f tension 4: %f ", tension1, tension2, tension3, tension4);


			} 

			}




msg.data = tension1;
tension11_pub.publish(msg);
msg.data = tension2;
tension21_pub.publish(msg);
msg.data = tension3;
tension31_pub.publish(msg);
msg.data = tension4;
tension41_pub.publish(msg);

usleep(2);
printf("\n");



}

close(fd);

 return 0; 
}
