// Generated by gencpp from file sr_grasp_msgs/KCL_GraspQuality.msg
// DO NOT EDIT!


#ifndef SR_GRASP_MSGS_MESSAGE_KCL_GRASPQUALITY_H
#define SR_GRASP_MSGS_MESSAGE_KCL_GRASPQUALITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace sr_grasp_msgs
{
template <class ContainerAllocator>
struct KCL_GraspQuality_
{
  typedef KCL_GraspQuality_<ContainerAllocator> Type;

  KCL_GraspQuality_()
    : header()
    , resultant_force()
    , resultant_torque()
    , hull_force_dist()
    , hull_torque_dist()
    , hull_volume_force(0.0)
    , hull_volume_torque(0.0)  {
    }
  KCL_GraspQuality_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , resultant_force(_alloc)
    , resultant_torque(_alloc)
    , hull_force_dist(_alloc)
    , hull_torque_dist(_alloc)
    , hull_volume_force(0.0)
    , hull_volume_torque(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _resultant_force_type;
  _resultant_force_type resultant_force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _resultant_torque_type;
  _resultant_torque_type resultant_torque;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _hull_force_dist_type;
  _hull_force_dist_type hull_force_dist;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _hull_torque_dist_type;
  _hull_torque_dist_type hull_torque_dist;

   typedef double _hull_volume_force_type;
  _hull_volume_force_type hull_volume_force;

   typedef double _hull_volume_torque_type;
  _hull_volume_torque_type hull_volume_torque;




  typedef boost::shared_ptr< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> const> ConstPtr;

}; // struct KCL_GraspQuality_

typedef ::sr_grasp_msgs::KCL_GraspQuality_<std::allocator<void> > KCL_GraspQuality;

typedef boost::shared_ptr< ::sr_grasp_msgs::KCL_GraspQuality > KCL_GraspQualityPtr;
typedef boost::shared_ptr< ::sr_grasp_msgs::KCL_GraspQuality const> KCL_GraspQualityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_grasp_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sr_grasp_msgs': ['/home/catheter/catheter_position/src/sr_grasp_msgs/msg', '/home/catheter/catheter_position/devel/share/sr_grasp_msgs/msg'], 'shape_msgs': ['/opt/ros/indigo/share/shape_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/indigo/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/indigo/share/octomap_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/indigo/share/moveit_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/indigo/share/pcl_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c8ff29bdbd0865512357a0c247906ca";
  }

  static const char* value(const ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c8ff29bdbd08655ULL;
  static const uint64_t static_value2 = 0x12357a0c247906caULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_grasp_msgs/KCL_GraspQuality";
  }

  static const char* value(const ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# All 3D vectors are referenced in the fingertip core center\n\
\n\
Header header					# stamp\n\
geometry_msgs/Vector3 resultant_force  		# Resultant Force\n\
geometry_msgs/Vector3 resultant_torque      	# Resultant Torque\n\
float64[] hull_force_dist			# distances from force hull surface to origin in each octant\n\
float64[] hull_torque_dist			# distances from force hull surface to origin in each octant\n\
float64 hull_volume_force			# volume of force hull. basically the grasp quality. unitless.\n\
float64 hull_volume_torque			# volume of torque hull\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.resultant_force);
      stream.next(m.resultant_torque);
      stream.next(m.hull_force_dist);
      stream.next(m.hull_torque_dist);
      stream.next(m.hull_volume_force);
      stream.next(m.hull_volume_torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct KCL_GraspQuality_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_grasp_msgs::KCL_GraspQuality_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "resultant_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.resultant_force);
    s << indent << "resultant_torque: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.resultant_torque);
    s << indent << "hull_force_dist[]" << std::endl;
    for (size_t i = 0; i < v.hull_force_dist.size(); ++i)
    {
      s << indent << "  hull_force_dist[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hull_force_dist[i]);
    }
    s << indent << "hull_torque_dist[]" << std::endl;
    for (size_t i = 0; i < v.hull_torque_dist.size(); ++i)
    {
      s << indent << "  hull_torque_dist[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hull_torque_dist[i]);
    }
    s << indent << "hull_volume_force: ";
    Printer<double>::stream(s, indent + "  ", v.hull_volume_force);
    s << indent << "hull_volume_torque: ";
    Printer<double>::stream(s, indent + "  ", v.hull_volume_torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_GRASP_MSGS_MESSAGE_KCL_GRASPQUALITY_H
