"""autogenerated by genpy from sr_grasp_msgs/KCL_GraspQualityQueryRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_grasp_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class KCL_GraspQualityQueryRequest(genpy.Message):
  _md5sum = "7353b724a179abac3eefe1f9bfdd9185"
  _type = "sr_grasp_msgs/KCL_GraspQualityQueryRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sr_grasp_msgs/KCL_ContactStateStamped[] contacts
geometry_msgs/PointStamped centre_of_mass

================================================================================
MSG: sr_grasp_msgs/KCL_ContactStateStamped
# All 3D vectors are referenced in the fingertip core center

Header header					# stamp
geometry_msgs/Vector3 tangential_force  	# tangential force (local shear force)
geometry_msgs/Point  contact_position		# contact position
geometry_msgs/Vector3 contact_normal      	# contact normal
float64 Fnormal					# amplitude of normal force (along normal)
float64 Ltorque					# amplitude of local torque (around normal)


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

"""
  __slots__ = ['contacts','centre_of_mass']
  _slot_types = ['sr_grasp_msgs/KCL_ContactStateStamped[]','geometry_msgs/PointStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       contacts,centre_of_mass

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KCL_GraspQualityQueryRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.contacts is None:
        self.contacts = []
      if self.centre_of_mass is None:
        self.centre_of_mass = geometry_msgs.msg.PointStamped()
    else:
      self.contacts = []
      self.centre_of_mass = geometry_msgs.msg.PointStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.contacts)
      buff.write(_struct_I.pack(length))
      for val1 in self.contacts:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.tangential_force
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = val1.contact_position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = val1.contact_normal
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.Fnormal, _x.Ltorque))
      _x = self
      buff.write(_struct_3I.pack(_x.centre_of_mass.header.seq, _x.centre_of_mass.header.stamp.secs, _x.centre_of_mass.header.stamp.nsecs))
      _x = self.centre_of_mass.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.centre_of_mass.point.x, _x.centre_of_mass.point.y, _x.centre_of_mass.point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.contacts is None:
        self.contacts = None
      if self.centre_of_mass is None:
        self.centre_of_mass = geometry_msgs.msg.PointStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contacts = []
      for i in range(0, length):
        val1 = sr_grasp_msgs.msg.KCL_ContactStateStamped()
        _v6 = val1.header
        start = end
        end += 4
        (_v6.seq,) = _struct_I.unpack(str[start:end])
        _v7 = _v6.stamp
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.frame_id = str[start:end].decode('utf-8')
        else:
          _v6.frame_id = str[start:end]
        _v8 = val1.tangential_force
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v9 = val1.contact_position
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v10 = val1.contact_normal
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.Fnormal, _x.Ltorque,) = _struct_2d.unpack(str[start:end])
        self.contacts.append(val1)
      _x = self
      start = end
      end += 12
      (_x.centre_of_mass.header.seq, _x.centre_of_mass.header.stamp.secs, _x.centre_of_mass.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.centre_of_mass.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.centre_of_mass.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.centre_of_mass.point.x, _x.centre_of_mass.point.y, _x.centre_of_mass.point.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.contacts)
      buff.write(_struct_I.pack(length))
      for val1 in self.contacts:
        _v11 = val1.header
        buff.write(_struct_I.pack(_v11.seq))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v13 = val1.tangential_force
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v14 = val1.contact_position
        _x = _v14
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v15 = val1.contact_normal
        _x = _v15
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.Fnormal, _x.Ltorque))
      _x = self
      buff.write(_struct_3I.pack(_x.centre_of_mass.header.seq, _x.centre_of_mass.header.stamp.secs, _x.centre_of_mass.header.stamp.nsecs))
      _x = self.centre_of_mass.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.centre_of_mass.point.x, _x.centre_of_mass.point.y, _x.centre_of_mass.point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.contacts is None:
        self.contacts = None
      if self.centre_of_mass is None:
        self.centre_of_mass = geometry_msgs.msg.PointStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contacts = []
      for i in range(0, length):
        val1 = sr_grasp_msgs.msg.KCL_ContactStateStamped()
        _v16 = val1.header
        start = end
        end += 4
        (_v16.seq,) = _struct_I.unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.frame_id = str[start:end].decode('utf-8')
        else:
          _v16.frame_id = str[start:end]
        _v18 = val1.tangential_force
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v19 = val1.contact_position
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v20 = val1.contact_normal
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.Fnormal, _x.Ltorque,) = _struct_2d.unpack(str[start:end])
        self.contacts.append(val1)
      _x = self
      start = end
      end += 12
      (_x.centre_of_mass.header.seq, _x.centre_of_mass.header.stamp.secs, _x.centre_of_mass.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.centre_of_mass.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.centre_of_mass.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.centre_of_mass.point.x, _x.centre_of_mass.point.y, _x.centre_of_mass.point.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from sr_grasp_msgs/KCL_GraspQualityQueryResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_grasp_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class KCL_GraspQualityQueryResponse(genpy.Message):
  _md5sum = "9bda35ded3199bed5884d8d9a6fac663"
  _type = "sr_grasp_msgs/KCL_GraspQualityQueryResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """KCL_GraspQuality quality



================================================================================
MSG: sr_grasp_msgs/KCL_GraspQuality
# All 3D vectors are referenced in the fingertip core center

Header header					# stamp
geometry_msgs/Vector3 resultant_force  		# Resultant Force
geometry_msgs/Vector3 resultant_torque      	# Resultant Torque
float64[] hull_force_dist			# distances from force hull surface to origin in each octant
float64[] hull_torque_dist			# distances from force hull surface to origin in each octant
float64 hull_volume_force			# volume of force hull. basically the grasp quality. unitless.
float64 hull_volume_torque			# volume of torque hull


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['quality']
  _slot_types = ['sr_grasp_msgs/KCL_GraspQuality']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       quality

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KCL_GraspQualityQueryResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.quality is None:
        self.quality = sr_grasp_msgs.msg.KCL_GraspQuality()
    else:
      self.quality = sr_grasp_msgs.msg.KCL_GraspQuality()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs))
      _x = self.quality.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.quality.resultant_force.x, _x.quality.resultant_force.y, _x.quality.resultant_force.z, _x.quality.resultant_torque.x, _x.quality.resultant_torque.y, _x.quality.resultant_torque.z))
      length = len(self.quality.hull_force_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.quality.hull_force_dist))
      length = len(self.quality.hull_torque_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.quality.hull_torque_dist))
      _x = self
      buff.write(_struct_2d.pack(_x.quality.hull_volume_force, _x.quality.hull_volume_torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.quality is None:
        self.quality = sr_grasp_msgs.msg.KCL_GraspQuality()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quality.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.quality.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.quality.resultant_force.x, _x.quality.resultant_force.y, _x.quality.resultant_force.z, _x.quality.resultant_torque.x, _x.quality.resultant_torque.y, _x.quality.resultant_torque.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.quality.hull_force_dist = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.quality.hull_torque_dist = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.quality.hull_volume_force, _x.quality.hull_volume_torque,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs))
      _x = self.quality.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.quality.resultant_force.x, _x.quality.resultant_force.y, _x.quality.resultant_force.z, _x.quality.resultant_torque.x, _x.quality.resultant_torque.y, _x.quality.resultant_torque.z))
      length = len(self.quality.hull_force_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.quality.hull_force_dist.tostring())
      length = len(self.quality.hull_torque_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.quality.hull_torque_dist.tostring())
      _x = self
      buff.write(_struct_2d.pack(_x.quality.hull_volume_force, _x.quality.hull_volume_torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.quality is None:
        self.quality = sr_grasp_msgs.msg.KCL_GraspQuality()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quality.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.quality.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.quality.resultant_force.x, _x.quality.resultant_force.y, _x.quality.resultant_force.z, _x.quality.resultant_torque.x, _x.quality.resultant_torque.y, _x.quality.resultant_torque.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.quality.hull_force_dist = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.quality.hull_torque_dist = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.quality.hull_volume_force, _x.quality.hull_volume_torque,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_6d = struct.Struct("<6d")
class KCL_GraspQualityQuery(object):
  _type          = 'sr_grasp_msgs/KCL_GraspQualityQuery'
  _md5sum = 'b80430ef87f1ab2ffc18ffe08ba13cb0'
  _request_class  = KCL_GraspQualityQueryRequest
  _response_class = KCL_GraspQualityQueryResponse
