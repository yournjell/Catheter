"""autogenerated by genpy from sr_grasp_msgs/KCL_PoseCorrectionRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import shape_msgs.msg
import std_msgs.msg

class KCL_PoseCorrectionRequest(genpy.Message):
  _md5sum = "252989ee8a0cd6dca6696f19c316c91a"
  _type = "sr_grasp_msgs/KCL_PoseCorrectionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 model_id
shape_msgs/Mesh mesh
geometry_msgs/PoseStamped initial_pose

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['model_id','mesh','initial_pose']
  _slot_types = ['int32','shape_msgs/Mesh','geometry_msgs/PoseStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       model_id,mesh,initial_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KCL_PoseCorrectionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.model_id is None:
        self.model_id = 0
      if self.mesh is None:
        self.mesh = shape_msgs.msg.Mesh()
      if self.initial_pose is None:
        self.initial_pose = geometry_msgs.msg.PoseStamped()
    else:
      self.model_id = 0
      self.mesh = shape_msgs.msg.Mesh()
      self.initial_pose = geometry_msgs.msg.PoseStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.model_id))
      length = len(self.mesh.triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh.triangles:
        buff.write(_struct_3I.pack(*val1.vertex_indices))
      length = len(self.mesh.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.initial_pose.header.seq, _x.initial_pose.header.stamp.secs, _x.initial_pose.header.stamp.nsecs))
      _x = self.initial_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.initial_pose.pose.position.x, _x.initial_pose.pose.position.y, _x.initial_pose.pose.position.z, _x.initial_pose.pose.orientation.x, _x.initial_pose.pose.orientation.y, _x.initial_pose.pose.orientation.z, _x.initial_pose.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.mesh is None:
        self.mesh = shape_msgs.msg.Mesh()
      if self.initial_pose is None:
        self.initial_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (self.model_id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh.triangles = []
      for i in range(0, length):
        val1 = shape_msgs.msg.MeshTriangle()
        start = end
        end += 12
        val1.vertex_indices = _struct_3I.unpack(str[start:end])
        self.mesh.triangles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.mesh.vertices.append(val1)
      _x = self
      start = end
      end += 12
      (_x.initial_pose.header.seq, _x.initial_pose.header.stamp.secs, _x.initial_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.initial_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.initial_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.initial_pose.pose.position.x, _x.initial_pose.pose.position.y, _x.initial_pose.pose.position.z, _x.initial_pose.pose.orientation.x, _x.initial_pose.pose.orientation.y, _x.initial_pose.pose.orientation.z, _x.initial_pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.model_id))
      length = len(self.mesh.triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh.triangles:
        buff.write(val1.vertex_indices.tostring())
      length = len(self.mesh.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.initial_pose.header.seq, _x.initial_pose.header.stamp.secs, _x.initial_pose.header.stamp.nsecs))
      _x = self.initial_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.initial_pose.pose.position.x, _x.initial_pose.pose.position.y, _x.initial_pose.pose.position.z, _x.initial_pose.pose.orientation.x, _x.initial_pose.pose.orientation.y, _x.initial_pose.pose.orientation.z, _x.initial_pose.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.mesh is None:
        self.mesh = shape_msgs.msg.Mesh()
      if self.initial_pose is None:
        self.initial_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (self.model_id,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh.triangles = []
      for i in range(0, length):
        val1 = shape_msgs.msg.MeshTriangle()
        start = end
        end += 12
        val1.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
        self.mesh.triangles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.mesh.vertices.append(val1)
      _x = self
      start = end
      end += 12
      (_x.initial_pose.header.seq, _x.initial_pose.header.stamp.secs, _x.initial_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.initial_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.initial_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.initial_pose.pose.position.x, _x.initial_pose.pose.position.y, _x.initial_pose.pose.position.z, _x.initial_pose.pose.orientation.x, _x.initial_pose.pose.orientation.y, _x.initial_pose.pose.orientation.z, _x.initial_pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from sr_grasp_msgs/KCL_PoseCorrectionResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class KCL_PoseCorrectionResponse(genpy.Message):
  _md5sum = "9924adf4074f84132773afd8cc4c3a7b"
  _type = "sr_grasp_msgs/KCL_PoseCorrectionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/PoseStamped rect_pose
std_msgs/Float64 confidence
bool reply



================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Float64
float64 data
"""
  __slots__ = ['rect_pose','confidence','reply']
  _slot_types = ['geometry_msgs/PoseStamped','std_msgs/Float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rect_pose,confidence,reply

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KCL_PoseCorrectionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rect_pose is None:
        self.rect_pose = geometry_msgs.msg.PoseStamped()
      if self.confidence is None:
        self.confidence = std_msgs.msg.Float64()
      if self.reply is None:
        self.reply = False
    else:
      self.rect_pose = geometry_msgs.msg.PoseStamped()
      self.confidence = std_msgs.msg.Float64()
      self.reply = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.rect_pose.header.seq, _x.rect_pose.header.stamp.secs, _x.rect_pose.header.stamp.nsecs))
      _x = self.rect_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8dB.pack(_x.rect_pose.pose.position.x, _x.rect_pose.pose.position.y, _x.rect_pose.pose.position.z, _x.rect_pose.pose.orientation.x, _x.rect_pose.pose.orientation.y, _x.rect_pose.pose.orientation.z, _x.rect_pose.pose.orientation.w, _x.confidence.data, _x.reply))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.rect_pose is None:
        self.rect_pose = geometry_msgs.msg.PoseStamped()
      if self.confidence is None:
        self.confidence = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.rect_pose.header.seq, _x.rect_pose.header.stamp.secs, _x.rect_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rect_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rect_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.rect_pose.pose.position.x, _x.rect_pose.pose.position.y, _x.rect_pose.pose.position.z, _x.rect_pose.pose.orientation.x, _x.rect_pose.pose.orientation.y, _x.rect_pose.pose.orientation.z, _x.rect_pose.pose.orientation.w, _x.confidence.data, _x.reply,) = _struct_8dB.unpack(str[start:end])
      self.reply = bool(self.reply)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.rect_pose.header.seq, _x.rect_pose.header.stamp.secs, _x.rect_pose.header.stamp.nsecs))
      _x = self.rect_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8dB.pack(_x.rect_pose.pose.position.x, _x.rect_pose.pose.position.y, _x.rect_pose.pose.position.z, _x.rect_pose.pose.orientation.x, _x.rect_pose.pose.orientation.y, _x.rect_pose.pose.orientation.z, _x.rect_pose.pose.orientation.w, _x.confidence.data, _x.reply))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.rect_pose is None:
        self.rect_pose = geometry_msgs.msg.PoseStamped()
      if self.confidence is None:
        self.confidence = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.rect_pose.header.seq, _x.rect_pose.header.stamp.secs, _x.rect_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rect_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rect_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.rect_pose.pose.position.x, _x.rect_pose.pose.position.y, _x.rect_pose.pose.position.z, _x.rect_pose.pose.orientation.x, _x.rect_pose.pose.orientation.y, _x.rect_pose.pose.orientation.z, _x.rect_pose.pose.orientation.w, _x.confidence.data, _x.reply,) = _struct_8dB.unpack(str[start:end])
      self.reply = bool(self.reply)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_8dB = struct.Struct("<8dB")
class KCL_PoseCorrection(object):
  _type          = 'sr_grasp_msgs/KCL_PoseCorrection'
  _md5sum = '6f6f28b543f31ba5c3ddd26676eb9bb8'
  _request_class  = KCL_PoseCorrectionRequest
  _response_class = KCL_PoseCorrectionResponse
