"""autogenerated by genpy from sr_grasp_msgs/AdjustGraspFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_grasp_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class AdjustGraspFeedback(genpy.Message):
  _md5sum = "f53e9a8ba34d5929c78e8792c960b05d"
  _type = "sr_grasp_msgs/AdjustGraspFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback
# State shows what the node is currently doing.
uint8 SELECTING=0
uint8 GAITING=1
uint8 EXPLORING=2
uint8 IMPROVING=3
uint8 state
# A percentage or other measure of the quality of the grasp.
KCL_GraspQuality quality


================================================================================
MSG: sr_grasp_msgs/KCL_GraspQuality
# All 3D vectors are referenced in the fingertip core center

Header header					# stamp
geometry_msgs/Vector3 resultant_force  		# Resultant Force
geometry_msgs/Vector3 resultant_torque      	# Resultant Torque
float64[] hull_force_dist			# distances from force hull surface to origin in each octant
float64[] hull_torque_dist			# distances from force hull surface to origin in each octant
float64 hull_volume_force			# volume of force hull. basically the grasp quality. unitless.
float64 hull_volume_torque			# volume of torque hull


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  SELECTING = 0
  GAITING = 1
  EXPLORING = 2
  IMPROVING = 3

  __slots__ = ['state','quality']
  _slot_types = ['uint8','sr_grasp_msgs/KCL_GraspQuality']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,quality

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdjustGraspFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.quality is None:
        self.quality = sr_grasp_msgs.msg.KCL_GraspQuality()
    else:
      self.state = 0
      self.quality = sr_grasp_msgs.msg.KCL_GraspQuality()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B3I.pack(_x.state, _x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs))
      _x = self.quality.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.quality.resultant_force.x, _x.quality.resultant_force.y, _x.quality.resultant_force.z, _x.quality.resultant_torque.x, _x.quality.resultant_torque.y, _x.quality.resultant_torque.z))
      length = len(self.quality.hull_force_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.quality.hull_force_dist))
      length = len(self.quality.hull_torque_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.quality.hull_torque_dist))
      _x = self
      buff.write(_struct_2d.pack(_x.quality.hull_volume_force, _x.quality.hull_volume_torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.quality is None:
        self.quality = sr_grasp_msgs.msg.KCL_GraspQuality()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.state, _x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quality.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.quality.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.quality.resultant_force.x, _x.quality.resultant_force.y, _x.quality.resultant_force.z, _x.quality.resultant_torque.x, _x.quality.resultant_torque.y, _x.quality.resultant_torque.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.quality.hull_force_dist = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.quality.hull_torque_dist = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.quality.hull_volume_force, _x.quality.hull_volume_torque,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B3I.pack(_x.state, _x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs))
      _x = self.quality.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.quality.resultant_force.x, _x.quality.resultant_force.y, _x.quality.resultant_force.z, _x.quality.resultant_torque.x, _x.quality.resultant_torque.y, _x.quality.resultant_torque.z))
      length = len(self.quality.hull_force_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.quality.hull_force_dist.tostring())
      length = len(self.quality.hull_torque_dist)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.quality.hull_torque_dist.tostring())
      _x = self
      buff.write(_struct_2d.pack(_x.quality.hull_volume_force, _x.quality.hull_volume_torque))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.quality is None:
        self.quality = sr_grasp_msgs.msg.KCL_GraspQuality()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.state, _x.quality.header.seq, _x.quality.header.stamp.secs, _x.quality.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quality.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.quality.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.quality.resultant_force.x, _x.quality.resultant_force.y, _x.quality.resultant_force.z, _x.quality.resultant_torque.x, _x.quality.resultant_torque.y, _x.quality.resultant_torque.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.quality.hull_force_dist = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.quality.hull_torque_dist = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.quality.hull_volume_force, _x.quality.hull_volume_torque,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_6d = struct.Struct("<6d")
_struct_B3I = struct.Struct("<B3I")
