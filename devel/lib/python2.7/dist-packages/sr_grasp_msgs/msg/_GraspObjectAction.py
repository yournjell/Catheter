"""autogenerated by genpy from sr_grasp_msgs/GraspObjectAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import actionlib_msgs.msg
import sr_grasp_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class GraspObjectAction(genpy.Message):
  _md5sum = "ea040e60912401800a285bc8a3ae4f51"
  _type = "sr_grasp_msgs/GraspObjectAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

GraspObjectActionGoal action_goal
GraspObjectActionResult action_result
GraspObjectActionFeedback action_feedback

================================================================================
MSG: sr_grasp_msgs/GraspObjectActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
GraspObjectGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: sr_grasp_msgs/GraspObjectGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Grasp an object.
# Goal
object_recognition_msgs/RecognizedObject object
# Optional, suggested grasps to try, if non given will compute a grasp.
moveit_msgs/Grasp[] possible_grasps

================================================================================
MSG: object_recognition_msgs/RecognizedObject
##################################################### HEADER ###########################################################

# The header frame corresponds to the pose frame, NOT the point_cloud frame.
Header header

################################################## OBJECT INFO #########################################################

# Contains information about the type and the position of a found object
# Some of those fields might not be filled because the used techniques do not fill them or because the user does not
# request them

# The type of the found object
object_recognition_msgs/ObjectType type

#confidence: how sure you are it is that object and not another one.
# It is between 0 and 1 and the closer to one it is the better
float32 confidence

################################################ OBJECT CLUSTERS #######################################################

# Sometimes you can extract the 3d points that belong to the object, in the frames of the original sensors
# (it is an array as you might have several sensors)
sensor_msgs/PointCloud2[] point_clouds

# Sometimes, you can only provide a bounding box/shape, even in 3d
# This is in the pose frame
shape_msgs/Mesh bounding_mesh

# Sometimes, you only have 2d input so you can't really give a pose, you just get a contour, or a box
# The last point will be linked to the first one automatically
geometry_msgs/Point[] bounding_contours

#################################################### POSE INFO #########################################################

# This is the result that everybody expects : the pose in some frame given with the input. The units are radian/meters
# as usual
geometry_msgs/PoseWithCovarianceStamped pose

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/PoseWithCovarianceStamped
# This expresses an estimated pose with a reference coordinate frame and timestamp

Header header
PoseWithCovariance pose

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: moveit_msgs/Grasp
# This message contains a description of a grasp that would be used
# with a particular end-effector to grasp an object, including how to
# approach it, grip it, etc.  This message does not contain any
# information about a "grasp point" (a position ON the object).
# Whatever generates this message should have already combined
# information about grasp points with information about the geometry
# of the end-effector to compute the grasp_pose in this message.

# A name for this grasp
string id

# The internal posture of the hand for the pre-grasp
# only positions are used
trajectory_msgs/JointTrajectory pre_grasp_posture

# The internal posture of the hand for the grasp
# positions and efforts are used
trajectory_msgs/JointTrajectory grasp_posture

# The position of the end-effector for the grasp.  This is the pose of
# the "parent_link" of the end-effector, not actually the pose of any
# link *in* the end-effector.  Typically this would be the pose of the
# most distal wrist link before the hand (end-effector) links began.
geometry_msgs/PoseStamped grasp_pose

# The estimated probability of success for this grasp, or some other
# measure of how "good" it is.
float64 grasp_quality

# The approach direction to take before picking an object
GripperTranslation pre_grasp_approach

# The retreat direction to take after a grasp has been completed (object is attached)
GripperTranslation post_grasp_retreat

# The retreat motion to perform when releasing the object; this information
# is not necessary for the grasp itself, but when releasing the object,
# the information will be necessary. The grasp used to perform a pickup
# is returned as part of the result, so this information is available for 
# later use.
GripperTranslation post_place_retreat

# the maximum contact force to use while grasping (<=0 to disable)
float32 max_contact_force

# an optional list of obstacles that we have semantic information about
# and that can be touched/pushed/moved in the course of grasping
string[] allowed_touch_objects

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/GripperTranslation
# defines a translation for the gripper, used in pickup or place tasks
# for example for lifting an object off a table or approaching the table for placing

# the direction of the translation
geometry_msgs/Vector3Stamped direction

# the desired translation distance
float32 desired_distance

# the min distance that must be considered feasible before the
# grasp is even attempted
float32 min_distance

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: sr_grasp_msgs/GraspObjectActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
GraspObjectResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: sr_grasp_msgs/GraspObjectResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result
moveit_msgs/Grasp executed_grasp

================================================================================
MSG: sr_grasp_msgs/GraspObjectActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
GraspObjectFeedback feedback

================================================================================
MSG: sr_grasp_msgs/GraspObjectFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback
# State shows what the node is currently doing.
uint8 TRACKING=0
uint8 GRABBING=1
uint8 STABILISING=2
uint8 RELEASING=3
uint8 state
# A percentage or other measure of the quality of the grasp.
float64 quality
# How far away the object is.
float64 distance


"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['sr_grasp_msgs/GraspObjectActionGoal','sr_grasp_msgs/GraspObjectActionResult','sr_grasp_msgs/GraspObjectActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraspObjectAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = sr_grasp_msgs.msg.GraspObjectActionGoal()
      if self.action_result is None:
        self.action_result = sr_grasp_msgs.msg.GraspObjectActionResult()
      if self.action_feedback is None:
        self.action_feedback = sr_grasp_msgs.msg.GraspObjectActionFeedback()
    else:
      self.action_goal = sr_grasp_msgs.msg.GraspObjectActionGoal()
      self.action_result = sr_grasp_msgs.msg.GraspObjectActionResult()
      self.action_feedback = sr_grasp_msgs.msg.GraspObjectActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.object.header.seq, _x.action_goal.goal.object.header.stamp.secs, _x.action_goal.goal.object.header.stamp.nsecs))
      _x = self.action_goal.goal.object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.object.type.key
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.object.type.db
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_f.pack(self.action_goal.goal.object.confidence))
      length = len(self.action_goal.goal.object.point_clouds)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.object.point_clouds:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(val1.fields)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fields:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = val1
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.is_dense))
      length = len(self.action_goal.goal.object.bounding_mesh.triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.object.bounding_mesh.triangles:
        buff.write(_struct_3I.pack(*val1.vertex_indices))
      length = len(self.action_goal.goal.object.bounding_mesh.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.object.bounding_mesh.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.object.bounding_contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.object.bounding_contours:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.object.pose.header.seq, _x.action_goal.goal.object.pose.header.stamp.secs, _x.action_goal.goal.object.pose.header.stamp.nsecs))
      _x = self.action_goal.goal.object.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.action_goal.goal.object.pose.pose.pose.position.x, _x.action_goal.goal.object.pose.pose.pose.position.y, _x.action_goal.goal.object.pose.pose.pose.position.z, _x.action_goal.goal.object.pose.pose.pose.orientation.x, _x.action_goal.goal.object.pose.pose.pose.orientation.y, _x.action_goal.goal.object.pose.pose.pose.orientation.z, _x.action_goal.goal.object.pose.pose.pose.orientation.w))
      buff.write(_struct_36d.pack(*self.action_goal.goal.object.pose.pose.covariance))
      length = len(self.action_goal.goal.possible_grasps)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.possible_grasps:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.pre_grasp_posture
        _v4 = _v3.header
        buff.write(_struct_I.pack(_v4.seq))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v3.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v3.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v6 = val3.time_from_start
          _x = _v6
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v7 = val1.grasp_posture
        _v8 = _v7.header
        buff.write(_struct_I.pack(_v8.seq))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v7.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v7.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v10 = val3.time_from_start
          _x = _v10
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v11 = val1.grasp_pose
        _v12 = _v11.header
        buff.write(_struct_I.pack(_v12.seq))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v14 = _v11.pose
        _v15 = _v14.position
        _x = _v15
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v16 = _v14.orientation
        _x = _v16
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.grasp_quality))
        _v17 = val1.pre_grasp_approach
        _v18 = _v17.direction
        _v19 = _v18.header
        buff.write(_struct_I.pack(_v19.seq))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v21 = _v18.vector
        _x = _v21
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v17
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v22 = val1.post_grasp_retreat
        _v23 = _v22.direction
        _v24 = _v23.header
        buff.write(_struct_I.pack(_v24.seq))
        _v25 = _v24.stamp
        _x = _v25
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v24.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v26 = _v23.vector
        _x = _v26
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v22
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v27 = val1.post_place_retreat
        _v28 = _v27.direction
        _v29 = _v28.header
        buff.write(_struct_I.pack(_v29.seq))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v31 = _v28.vector
        _x = _v31
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v27
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        buff.write(_struct_f.pack(val1.max_contact_force))
        length = len(val1.allowed_touch_objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.allowed_touch_objects:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_result.result.executed_grasp.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.executed_grasp.pre_grasp_posture.header.seq, _x.action_result.result.executed_grasp.pre_grasp_posture.header.stamp.secs, _x.action_result.result.executed_grasp.pre_grasp_posture.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.pre_grasp_posture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.executed_grasp.pre_grasp_posture.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.pre_grasp_posture.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.executed_grasp.pre_grasp_posture.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.pre_grasp_posture.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v32 = val1.time_from_start
        _x = _v32
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.executed_grasp.grasp_posture.header.seq, _x.action_result.result.executed_grasp.grasp_posture.header.stamp.secs, _x.action_result.result.executed_grasp.grasp_posture.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.grasp_posture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.executed_grasp.grasp_posture.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.grasp_posture.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.executed_grasp.grasp_posture.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.grasp_posture.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v33 = val1.time_from_start
        _x = _v33
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.executed_grasp.grasp_pose.header.seq, _x.action_result.result.executed_grasp.grasp_pose.header.stamp.secs, _x.action_result.result.executed_grasp.grasp_pose.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.grasp_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d3I.pack(_x.action_result.result.executed_grasp.grasp_pose.pose.position.x, _x.action_result.result.executed_grasp.grasp_pose.pose.position.y, _x.action_result.result.executed_grasp.grasp_pose.pose.position.z, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.x, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.y, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.z, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.w, _x.action_result.result.executed_grasp.grasp_quality, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.seq, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.stamp.secs, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.pre_grasp_approach.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2f3I.pack(_x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.x, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.y, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.z, _x.action_result.result.executed_grasp.pre_grasp_approach.desired_distance, _x.action_result.result.executed_grasp.pre_grasp_approach.min_distance, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.seq, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.stamp.secs, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.post_grasp_retreat.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2f3I.pack(_x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.x, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.y, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.z, _x.action_result.result.executed_grasp.post_grasp_retreat.desired_distance, _x.action_result.result.executed_grasp.post_grasp_retreat.min_distance, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.seq, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.stamp.secs, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.post_place_retreat.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3f.pack(_x.action_result.result.executed_grasp.post_place_retreat.direction.vector.x, _x.action_result.result.executed_grasp.post_place_retreat.direction.vector.y, _x.action_result.result.executed_grasp.post_place_retreat.direction.vector.z, _x.action_result.result.executed_grasp.post_place_retreat.desired_distance, _x.action_result.result.executed_grasp.post_place_retreat.min_distance, _x.action_result.result.executed_grasp.max_contact_force))
      length = len(self.action_result.result.executed_grasp.allowed_touch_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.allowed_touch_objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2d.pack(_x.action_feedback.feedback.state, _x.action_feedback.feedback.quality, _x.action_feedback.feedback.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = sr_grasp_msgs.msg.GraspObjectActionGoal()
      if self.action_result is None:
        self.action_result = sr_grasp_msgs.msg.GraspObjectActionResult()
      if self.action_feedback is None:
        self.action_feedback = sr_grasp_msgs.msg.GraspObjectActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.object.header.seq, _x.action_goal.goal.object.header.stamp.secs, _x.action_goal.goal.object.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.object.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.object.type.key = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.object.type.key = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.object.type.db = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.object.type.db = str[start:end]
      start = end
      end += 4
      (self.action_goal.goal.object.confidence,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.object.point_clouds = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointCloud2()
        _v34 = val1.header
        start = end
        end += 4
        (_v34.seq,) = _struct_I.unpack(str[start:end])
        _v35 = _v34.stamp
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.frame_id = str[start:end].decode('utf-8')
        else:
          _v34.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fields = []
        for i in range(0, length):
          val2 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          val1.fields.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        val1.is_bigendian = bool(val1.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        start = end
        end += 1
        (val1.is_dense,) = _struct_B.unpack(str[start:end])
        val1.is_dense = bool(val1.is_dense)
        self.action_goal.goal.object.point_clouds.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.object.bounding_mesh.triangles = []
      for i in range(0, length):
        val1 = shape_msgs.msg.MeshTriangle()
        start = end
        end += 12
        val1.vertex_indices = _struct_3I.unpack(str[start:end])
        self.action_goal.goal.object.bounding_mesh.triangles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.object.bounding_mesh.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.action_goal.goal.object.bounding_mesh.vertices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.object.bounding_contours = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.action_goal.goal.object.bounding_contours.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.object.pose.header.seq, _x.action_goal.goal.object.pose.header.stamp.secs, _x.action_goal.goal.object.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.object.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.object.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.action_goal.goal.object.pose.pose.pose.position.x, _x.action_goal.goal.object.pose.pose.pose.position.y, _x.action_goal.goal.object.pose.pose.pose.position.z, _x.action_goal.goal.object.pose.pose.pose.orientation.x, _x.action_goal.goal.object.pose.pose.pose.orientation.y, _x.action_goal.goal.object.pose.pose.pose.orientation.z, _x.action_goal.goal.object.pose.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.action_goal.goal.object.pose.pose.covariance = _struct_36d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.possible_grasps = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Grasp()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v36 = val1.pre_grasp_posture
        _v37 = _v36.header
        start = end
        end += 4
        (_v37.seq,) = _struct_I.unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_id = str[start:end].decode('utf-8')
        else:
          _v37.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v36.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v36.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v36.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v39 = val3.time_from_start
          _x = _v39
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v36.points.append(val3)
        _v40 = val1.grasp_posture
        _v41 = _v40.header
        start = end
        end += 4
        (_v41.seq,) = _struct_I.unpack(str[start:end])
        _v42 = _v41.stamp
        _x = _v42
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v41.frame_id = str[start:end].decode('utf-8')
        else:
          _v41.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v40.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v40.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v40.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v43 = val3.time_from_start
          _x = _v43
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v40.points.append(val3)
        _v44 = val1.grasp_pose
        _v45 = _v44.header
        start = end
        end += 4
        (_v45.seq,) = _struct_I.unpack(str[start:end])
        _v46 = _v45.stamp
        _x = _v46
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.frame_id = str[start:end].decode('utf-8')
        else:
          _v45.frame_id = str[start:end]
        _v47 = _v44.pose
        _v48 = _v47.position
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v49 = _v47.orientation
        _x = _v49
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.grasp_quality,) = _struct_d.unpack(str[start:end])
        _v50 = val1.pre_grasp_approach
        _v51 = _v50.direction
        _v52 = _v51.header
        start = end
        end += 4
        (_v52.seq,) = _struct_I.unpack(str[start:end])
        _v53 = _v52.stamp
        _x = _v53
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.frame_id = str[start:end].decode('utf-8')
        else:
          _v52.frame_id = str[start:end]
        _v54 = _v51.vector
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v50
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v55 = val1.post_grasp_retreat
        _v56 = _v55.direction
        _v57 = _v56.header
        start = end
        end += 4
        (_v57.seq,) = _struct_I.unpack(str[start:end])
        _v58 = _v57.stamp
        _x = _v58
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v57.frame_id = str[start:end].decode('utf-8')
        else:
          _v57.frame_id = str[start:end]
        _v59 = _v56.vector
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v55
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v60 = val1.post_place_retreat
        _v61 = _v60.direction
        _v62 = _v61.header
        start = end
        end += 4
        (_v62.seq,) = _struct_I.unpack(str[start:end])
        _v63 = _v62.stamp
        _x = _v63
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v62.frame_id = str[start:end].decode('utf-8')
        else:
          _v62.frame_id = str[start:end]
        _v64 = _v61.vector
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v60
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        start = end
        end += 4
        (val1.max_contact_force,) = _struct_f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.allowed_touch_objects = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.allowed_touch_objects.append(val2)
        self.action_goal.goal.possible_grasps.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_grasp.pre_grasp_posture.header.seq, _x.action_result.result.executed_grasp.pre_grasp_posture.header.stamp.secs, _x.action_result.result.executed_grasp.pre_grasp_posture.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.pre_grasp_posture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.pre_grasp_posture.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.pre_grasp_posture.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_grasp.pre_grasp_posture.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.pre_grasp_posture.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v65 = val1.time_from_start
        _x = _v65
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.action_result.result.executed_grasp.pre_grasp_posture.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_grasp.grasp_posture.header.seq, _x.action_result.result.executed_grasp.grasp_posture.header.stamp.secs, _x.action_result.result.executed_grasp.grasp_posture.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.grasp_posture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.grasp_posture.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.grasp_posture.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_grasp.grasp_posture.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.grasp_posture.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v66 = val1.time_from_start
        _x = _v66
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.action_result.result.executed_grasp.grasp_posture.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_grasp.grasp_pose.header.seq, _x.action_result.result.executed_grasp.grasp_pose.header.stamp.secs, _x.action_result.result.executed_grasp.grasp_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.grasp_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.grasp_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.action_result.result.executed_grasp.grasp_pose.pose.position.x, _x.action_result.result.executed_grasp.grasp_pose.pose.position.y, _x.action_result.result.executed_grasp.grasp_pose.pose.position.z, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.x, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.y, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.z, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.w, _x.action_result.result.executed_grasp.grasp_quality, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.seq, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.stamp.secs, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.stamp.nsecs,) = _struct_8d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.pre_grasp_approach.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.pre_grasp_approach.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.x, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.y, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.z, _x.action_result.result.executed_grasp.pre_grasp_approach.desired_distance, _x.action_result.result.executed_grasp.pre_grasp_approach.min_distance, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.seq, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.stamp.secs, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.stamp.nsecs,) = _struct_3d2f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.post_grasp_retreat.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.post_grasp_retreat.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.x, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.y, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.z, _x.action_result.result.executed_grasp.post_grasp_retreat.desired_distance, _x.action_result.result.executed_grasp.post_grasp_retreat.min_distance, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.seq, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.stamp.secs, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.stamp.nsecs,) = _struct_3d2f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.post_place_retreat.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.post_place_retreat.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.action_result.result.executed_grasp.post_place_retreat.direction.vector.x, _x.action_result.result.executed_grasp.post_place_retreat.direction.vector.y, _x.action_result.result.executed_grasp.post_place_retreat.direction.vector.z, _x.action_result.result.executed_grasp.post_place_retreat.desired_distance, _x.action_result.result.executed_grasp.post_place_retreat.min_distance, _x.action_result.result.executed_grasp.max_contact_force,) = _struct_3d3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.allowed_touch_objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_grasp.allowed_touch_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.action_feedback.feedback.state, _x.action_feedback.feedback.quality, _x.action_feedback.feedback.distance,) = _struct_B2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.object.header.seq, _x.action_goal.goal.object.header.stamp.secs, _x.action_goal.goal.object.header.stamp.nsecs))
      _x = self.action_goal.goal.object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.object.type.key
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.object.type.db
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_f.pack(self.action_goal.goal.object.confidence))
      length = len(self.action_goal.goal.object.point_clouds)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.object.point_clouds:
        _v67 = val1.header
        buff.write(_struct_I.pack(_v67.seq))
        _v68 = _v67.stamp
        _x = _v68
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v67.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(val1.fields)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fields:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = val1
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.is_dense))
      length = len(self.action_goal.goal.object.bounding_mesh.triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.object.bounding_mesh.triangles:
        buff.write(val1.vertex_indices.tostring())
      length = len(self.action_goal.goal.object.bounding_mesh.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.object.bounding_mesh.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.object.bounding_contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.object.bounding_contours:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.object.pose.header.seq, _x.action_goal.goal.object.pose.header.stamp.secs, _x.action_goal.goal.object.pose.header.stamp.nsecs))
      _x = self.action_goal.goal.object.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.action_goal.goal.object.pose.pose.pose.position.x, _x.action_goal.goal.object.pose.pose.pose.position.y, _x.action_goal.goal.object.pose.pose.pose.position.z, _x.action_goal.goal.object.pose.pose.pose.orientation.x, _x.action_goal.goal.object.pose.pose.pose.orientation.y, _x.action_goal.goal.object.pose.pose.pose.orientation.z, _x.action_goal.goal.object.pose.pose.pose.orientation.w))
      buff.write(self.action_goal.goal.object.pose.pose.covariance.tostring())
      length = len(self.action_goal.goal.possible_grasps)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.possible_grasps:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v69 = val1.pre_grasp_posture
        _v70 = _v69.header
        buff.write(_struct_I.pack(_v70.seq))
        _v71 = _v70.stamp
        _x = _v71
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v70.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v69.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v69.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v69.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v69.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v72 = val3.time_from_start
          _x = _v72
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v73 = val1.grasp_posture
        _v74 = _v73.header
        buff.write(_struct_I.pack(_v74.seq))
        _v75 = _v74.stamp
        _x = _v75
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v74.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v73.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v73.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v73.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v73.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v76 = val3.time_from_start
          _x = _v76
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v77 = val1.grasp_pose
        _v78 = _v77.header
        buff.write(_struct_I.pack(_v78.seq))
        _v79 = _v78.stamp
        _x = _v79
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v78.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v80 = _v77.pose
        _v81 = _v80.position
        _x = _v81
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v82 = _v80.orientation
        _x = _v82
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.grasp_quality))
        _v83 = val1.pre_grasp_approach
        _v84 = _v83.direction
        _v85 = _v84.header
        buff.write(_struct_I.pack(_v85.seq))
        _v86 = _v85.stamp
        _x = _v86
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v85.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v87 = _v84.vector
        _x = _v87
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v83
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v88 = val1.post_grasp_retreat
        _v89 = _v88.direction
        _v90 = _v89.header
        buff.write(_struct_I.pack(_v90.seq))
        _v91 = _v90.stamp
        _x = _v91
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v90.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v92 = _v89.vector
        _x = _v92
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v88
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v93 = val1.post_place_retreat
        _v94 = _v93.direction
        _v95 = _v94.header
        buff.write(_struct_I.pack(_v95.seq))
        _v96 = _v95.stamp
        _x = _v96
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v95.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v97 = _v94.vector
        _x = _v97
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v93
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        buff.write(_struct_f.pack(val1.max_contact_force))
        length = len(val1.allowed_touch_objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.allowed_touch_objects:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_result.result.executed_grasp.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.executed_grasp.pre_grasp_posture.header.seq, _x.action_result.result.executed_grasp.pre_grasp_posture.header.stamp.secs, _x.action_result.result.executed_grasp.pre_grasp_posture.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.pre_grasp_posture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.executed_grasp.pre_grasp_posture.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.pre_grasp_posture.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.executed_grasp.pre_grasp_posture.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.pre_grasp_posture.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v98 = val1.time_from_start
        _x = _v98
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.executed_grasp.grasp_posture.header.seq, _x.action_result.result.executed_grasp.grasp_posture.header.stamp.secs, _x.action_result.result.executed_grasp.grasp_posture.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.grasp_posture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.executed_grasp.grasp_posture.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.grasp_posture.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.executed_grasp.grasp_posture.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.grasp_posture.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v99 = val1.time_from_start
        _x = _v99
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.executed_grasp.grasp_pose.header.seq, _x.action_result.result.executed_grasp.grasp_pose.header.stamp.secs, _x.action_result.result.executed_grasp.grasp_pose.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.grasp_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d3I.pack(_x.action_result.result.executed_grasp.grasp_pose.pose.position.x, _x.action_result.result.executed_grasp.grasp_pose.pose.position.y, _x.action_result.result.executed_grasp.grasp_pose.pose.position.z, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.x, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.y, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.z, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.w, _x.action_result.result.executed_grasp.grasp_quality, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.seq, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.stamp.secs, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.pre_grasp_approach.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2f3I.pack(_x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.x, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.y, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.z, _x.action_result.result.executed_grasp.pre_grasp_approach.desired_distance, _x.action_result.result.executed_grasp.pre_grasp_approach.min_distance, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.seq, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.stamp.secs, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.post_grasp_retreat.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d2f3I.pack(_x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.x, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.y, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.z, _x.action_result.result.executed_grasp.post_grasp_retreat.desired_distance, _x.action_result.result.executed_grasp.post_grasp_retreat.min_distance, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.seq, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.stamp.secs, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.stamp.nsecs))
      _x = self.action_result.result.executed_grasp.post_place_retreat.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3f.pack(_x.action_result.result.executed_grasp.post_place_retreat.direction.vector.x, _x.action_result.result.executed_grasp.post_place_retreat.direction.vector.y, _x.action_result.result.executed_grasp.post_place_retreat.direction.vector.z, _x.action_result.result.executed_grasp.post_place_retreat.desired_distance, _x.action_result.result.executed_grasp.post_place_retreat.min_distance, _x.action_result.result.executed_grasp.max_contact_force))
      length = len(self.action_result.result.executed_grasp.allowed_touch_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_grasp.allowed_touch_objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2d.pack(_x.action_feedback.feedback.state, _x.action_feedback.feedback.quality, _x.action_feedback.feedback.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = sr_grasp_msgs.msg.GraspObjectActionGoal()
      if self.action_result is None:
        self.action_result = sr_grasp_msgs.msg.GraspObjectActionResult()
      if self.action_feedback is None:
        self.action_feedback = sr_grasp_msgs.msg.GraspObjectActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.object.header.seq, _x.action_goal.goal.object.header.stamp.secs, _x.action_goal.goal.object.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.object.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.object.type.key = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.object.type.key = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.object.type.db = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.object.type.db = str[start:end]
      start = end
      end += 4
      (self.action_goal.goal.object.confidence,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.object.point_clouds = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointCloud2()
        _v100 = val1.header
        start = end
        end += 4
        (_v100.seq,) = _struct_I.unpack(str[start:end])
        _v101 = _v100.stamp
        _x = _v101
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v100.frame_id = str[start:end].decode('utf-8')
        else:
          _v100.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fields = []
        for i in range(0, length):
          val2 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          val1.fields.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        val1.is_bigendian = bool(val1.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        start = end
        end += 1
        (val1.is_dense,) = _struct_B.unpack(str[start:end])
        val1.is_dense = bool(val1.is_dense)
        self.action_goal.goal.object.point_clouds.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.object.bounding_mesh.triangles = []
      for i in range(0, length):
        val1 = shape_msgs.msg.MeshTriangle()
        start = end
        end += 12
        val1.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
        self.action_goal.goal.object.bounding_mesh.triangles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.object.bounding_mesh.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.action_goal.goal.object.bounding_mesh.vertices.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.object.bounding_contours = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.action_goal.goal.object.bounding_contours.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.object.pose.header.seq, _x.action_goal.goal.object.pose.header.stamp.secs, _x.action_goal.goal.object.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.object.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.object.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.action_goal.goal.object.pose.pose.pose.position.x, _x.action_goal.goal.object.pose.pose.pose.position.y, _x.action_goal.goal.object.pose.pose.pose.position.z, _x.action_goal.goal.object.pose.pose.pose.orientation.x, _x.action_goal.goal.object.pose.pose.pose.orientation.y, _x.action_goal.goal.object.pose.pose.pose.orientation.z, _x.action_goal.goal.object.pose.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.action_goal.goal.object.pose.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.possible_grasps = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Grasp()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v102 = val1.pre_grasp_posture
        _v103 = _v102.header
        start = end
        end += 4
        (_v103.seq,) = _struct_I.unpack(str[start:end])
        _v104 = _v103.stamp
        _x = _v104
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v103.frame_id = str[start:end].decode('utf-8')
        else:
          _v103.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v102.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v102.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v102.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v105 = val3.time_from_start
          _x = _v105
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v102.points.append(val3)
        _v106 = val1.grasp_posture
        _v107 = _v106.header
        start = end
        end += 4
        (_v107.seq,) = _struct_I.unpack(str[start:end])
        _v108 = _v107.stamp
        _x = _v108
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v107.frame_id = str[start:end].decode('utf-8')
        else:
          _v107.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v106.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v106.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v106.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v109 = val3.time_from_start
          _x = _v109
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v106.points.append(val3)
        _v110 = val1.grasp_pose
        _v111 = _v110.header
        start = end
        end += 4
        (_v111.seq,) = _struct_I.unpack(str[start:end])
        _v112 = _v111.stamp
        _x = _v112
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v111.frame_id = str[start:end].decode('utf-8')
        else:
          _v111.frame_id = str[start:end]
        _v113 = _v110.pose
        _v114 = _v113.position
        _x = _v114
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v115 = _v113.orientation
        _x = _v115
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.grasp_quality,) = _struct_d.unpack(str[start:end])
        _v116 = val1.pre_grasp_approach
        _v117 = _v116.direction
        _v118 = _v117.header
        start = end
        end += 4
        (_v118.seq,) = _struct_I.unpack(str[start:end])
        _v119 = _v118.stamp
        _x = _v119
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v118.frame_id = str[start:end].decode('utf-8')
        else:
          _v118.frame_id = str[start:end]
        _v120 = _v117.vector
        _x = _v120
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v116
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v121 = val1.post_grasp_retreat
        _v122 = _v121.direction
        _v123 = _v122.header
        start = end
        end += 4
        (_v123.seq,) = _struct_I.unpack(str[start:end])
        _v124 = _v123.stamp
        _x = _v124
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v123.frame_id = str[start:end].decode('utf-8')
        else:
          _v123.frame_id = str[start:end]
        _v125 = _v122.vector
        _x = _v125
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v121
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v126 = val1.post_place_retreat
        _v127 = _v126.direction
        _v128 = _v127.header
        start = end
        end += 4
        (_v128.seq,) = _struct_I.unpack(str[start:end])
        _v129 = _v128.stamp
        _x = _v129
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v128.frame_id = str[start:end].decode('utf-8')
        else:
          _v128.frame_id = str[start:end]
        _v130 = _v127.vector
        _x = _v130
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v126
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        start = end
        end += 4
        (val1.max_contact_force,) = _struct_f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.allowed_touch_objects = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.allowed_touch_objects.append(val2)
        self.action_goal.goal.possible_grasps.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_grasp.pre_grasp_posture.header.seq, _x.action_result.result.executed_grasp.pre_grasp_posture.header.stamp.secs, _x.action_result.result.executed_grasp.pre_grasp_posture.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.pre_grasp_posture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.pre_grasp_posture.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.pre_grasp_posture.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_grasp.pre_grasp_posture.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.pre_grasp_posture.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v131 = val1.time_from_start
        _x = _v131
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.action_result.result.executed_grasp.pre_grasp_posture.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_grasp.grasp_posture.header.seq, _x.action_result.result.executed_grasp.grasp_posture.header.stamp.secs, _x.action_result.result.executed_grasp.grasp_posture.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.grasp_posture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.grasp_posture.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.grasp_posture.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_grasp.grasp_posture.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.grasp_posture.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v132 = val1.time_from_start
        _x = _v132
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.action_result.result.executed_grasp.grasp_posture.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_grasp.grasp_pose.header.seq, _x.action_result.result.executed_grasp.grasp_pose.header.stamp.secs, _x.action_result.result.executed_grasp.grasp_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.grasp_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.grasp_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.action_result.result.executed_grasp.grasp_pose.pose.position.x, _x.action_result.result.executed_grasp.grasp_pose.pose.position.y, _x.action_result.result.executed_grasp.grasp_pose.pose.position.z, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.x, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.y, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.z, _x.action_result.result.executed_grasp.grasp_pose.pose.orientation.w, _x.action_result.result.executed_grasp.grasp_quality, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.seq, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.stamp.secs, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.header.stamp.nsecs,) = _struct_8d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.pre_grasp_approach.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.pre_grasp_approach.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.x, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.y, _x.action_result.result.executed_grasp.pre_grasp_approach.direction.vector.z, _x.action_result.result.executed_grasp.pre_grasp_approach.desired_distance, _x.action_result.result.executed_grasp.pre_grasp_approach.min_distance, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.seq, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.stamp.secs, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.header.stamp.nsecs,) = _struct_3d2f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.post_grasp_retreat.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.post_grasp_retreat.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.x, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.y, _x.action_result.result.executed_grasp.post_grasp_retreat.direction.vector.z, _x.action_result.result.executed_grasp.post_grasp_retreat.desired_distance, _x.action_result.result.executed_grasp.post_grasp_retreat.min_distance, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.seq, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.stamp.secs, _x.action_result.result.executed_grasp.post_place_retreat.direction.header.stamp.nsecs,) = _struct_3d2f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_grasp.post_place_retreat.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_grasp.post_place_retreat.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.action_result.result.executed_grasp.post_place_retreat.direction.vector.x, _x.action_result.result.executed_grasp.post_place_retreat.direction.vector.y, _x.action_result.result.executed_grasp.post_place_retreat.direction.vector.z, _x.action_result.result.executed_grasp.post_place_retreat.desired_distance, _x.action_result.result.executed_grasp.post_place_retreat.min_distance, _x.action_result.result.executed_grasp.max_contact_force,) = _struct_3d3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_grasp.allowed_touch_objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_grasp.allowed_touch_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.action_feedback.feedback.state, _x.action_feedback.feedback.quality, _x.action_feedback.feedback.distance,) = _struct_B2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_f = struct.Struct("<f")
_struct_36d = struct.Struct("<36d")
_struct_2f = struct.Struct("<2f")
_struct_3d3f = struct.Struct("<3d3f")
_struct_2i = struct.Struct("<2i")
_struct_8d3I = struct.Struct("<8d3I")
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_B2I = struct.Struct("<B2I")
_struct_3d2f3I = struct.Struct("<3d2f3I")
_struct_4d = struct.Struct("<4d")
_struct_B2d = struct.Struct("<B2d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
